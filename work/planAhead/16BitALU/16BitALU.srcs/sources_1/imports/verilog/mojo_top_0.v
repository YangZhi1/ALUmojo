/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] aluOut
  );
  
  
  
  reg rst;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam INPUTA_state = 2'd0;
  localparam INPUTB_state = 2'd1;
  localparam INPUTALUFN_state = 2'd2;
  localparam CALCULATE_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = INPUTA_state;
  wire [1-1:0] M_alu_out;
  wire [16-1:0] M_alu_aluOut;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_2 alu (
    .clk(clk),
    .rst(rst),
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .aluOut(M_alu_aluOut),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    aluOut = 16'h0000;
    z = 1'h0;
    v = 1'h0;
    n = 1'h0;
    a = 16'h0000;
    b = 16'h0000;
    alufn = 6'h00;
    M_alu_a = a;
    M_alu_b = b;
    M_alu_alufn = alufn;
    
    case (M_state_q)
      INPUTA_state: begin
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+1+0-:1] = 1'h0;
        io_led[16+2+0-:1] = 1'h0;
        if (io_button[1+0-:1] == 1'h1) begin
          a[0+7-:8] = io_dip[0+0+7-:8];
          a[8+7-:8] = io_dip[8+0+7-:8];
          io_led = io_dip;
          M_state_d = INPUTB_state;
        end
      end
      INPUTB_state: begin
        io_led[16+0+0-:1] = 1'h0;
        io_led[16+1+0-:1] = 1'h1;
        io_led[16+2+0-:1] = 1'h0;
        if (io_button[1+0-:1] == 1'h1) begin
          b[0+7-:8] = io_dip[0+0+7-:8];
          b[8+7-:8] = io_dip[8+0+7-:8];
          io_led = io_dip;
          M_state_d = INPUTALUFN_state;
        end
      end
      INPUTALUFN_state: begin
        io_led[16+0+0-:1] = 1'h0;
        io_led[16+1+0-:1] = 1'h0;
        io_led[16+2+0-:1] = 1'h1;
        if (io_button[1+0-:1] == 1'h1) begin
          alufn = io_dip[0+0+5-:6];
          io_led = io_dip;
          M_state_d = CALCULATE_state;
        end
      end
      CALCULATE_state: begin
        M_alu_a = a;
        M_alu_b = b;
        M_alu_alufn = alufn;
        io_led[0+7-:8] = M_alu_aluOut[0+7-:8];
        io_led[8+7-:8] = M_alu_aluOut[8+7-:8];
        if (io_button[2+0-:1] == 1'h1) begin
          M_state_d = INPUTA_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
