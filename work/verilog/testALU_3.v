/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module testALU_3 (
    input clk,
    input rst,
    input [4:0] io_button,
    output reg [15:0] sum,
    input [23:0] io_dip,
    output reg [27:0] sevensegdisp,
    output reg setv,
    output reg setn,
    output reg setz
  );
  
  
  
  localparam ADD1_state = 5'd0;
  localparam ADD2_state = 5'd1;
  localparam ADD3_state = 5'd2;
  localparam ADD4_state = 5'd3;
  localparam SUB1_state = 5'd4;
  localparam SUB2_state = 5'd5;
  localparam SUB3_state = 5'd6;
  localparam SUB4_state = 5'd7;
  localparam AND1_state = 5'd8;
  localparam AND2_state = 5'd9;
  localparam AND3_state = 5'd10;
  localparam OR1_state = 5'd11;
  localparam OR2_state = 5'd12;
  localparam XOR1_state = 5'd13;
  localparam XOR2_state = 5'd14;
  localparam LDR_state = 5'd15;
  localparam SHL1_state = 5'd16;
  localparam SHL2_state = 5'd17;
  localparam SHR1_state = 5'd18;
  localparam SHR2_state = 5'd19;
  localparam SRA1_state = 5'd20;
  localparam SRA2_state = 5'd21;
  localparam CMPEQ_state = 5'd22;
  localparam CMPLT_state = 5'd23;
  localparam CMPLE_state = 5'd24;
  localparam MULT1_state = 5'd25;
  localparam MULT2_state = 5'd26;
  localparam MULT3_state = 5'd27;
  localparam FINISH_state = 5'd28;
  localparam WRONG_state = 5'd29;
  
  reg [4:0] M_state_d, M_state_q = ADD1_state;
  wire [16-1:0] M_alu_aluOut;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  reg [1-1:0] M_alu_setz;
  reg [1-1:0] M_alu_setv;
  reg [1-1:0] M_alu_setn;
  alu_7 alu (
    .clk(clk),
    .rst(rst),
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .setz(M_alu_setz),
    .setv(M_alu_setv),
    .setn(M_alu_setn),
    .aluOut(M_alu_aluOut),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  reg [27:0] M_clock_d, M_clock_q = 1'h0;
  
  localparam SPEED = 5'h19;
  
  reg [15:0] wrong;
  
  always @* begin
    M_state_d = M_state_q;
    M_clock_d = M_clock_q;
    
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    M_alu_alufn = 6'h00;
    setv = M_alu_v;
    setn = M_alu_n;
    setz = M_alu_z;
    M_alu_setn = 1'h0;
    M_alu_setv = 1'h0;
    M_alu_setz = 1'h0;
    sum = 16'h0000;
    sevensegdisp = 28'h0000000;
    wrong = 16'h0000;
    if (io_button[1+0-:1] == 1'h1) begin
      wrong = 16'hffff;
    end
    
    case (M_state_q)
      ADD1_state: begin
        M_alu_a = 16'h0001 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h00;
        sevensegdisp = 28'h8393201;
        sum = M_alu_aluOut;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0002) begin
          M_clock_d = 1'h0;
          M_state_d = ADD2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0002) begin
            M_state_d = WRONG_state;
          end
        end
      end
      ADD2_state: begin
        M_alu_a = 16'h8000 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h00;
        sevensegdisp = 28'h8393202;
        sum = M_alu_aluOut;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h8001 && M_alu_n == 1'h1) begin
          M_clock_d = 1'h0;
          M_state_d = ADD3_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h8001 || M_alu_n != 1'h1) begin
            M_state_d = WRONG_state;
          end
        end
      end
      ADD3_state: begin
        M_alu_a = 16'hffff + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h00;
        sevensegdisp = 28'h8393203;
        sum = M_alu_aluOut;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000 && M_alu_z == 1'h1) begin
          M_clock_d = 1'h0;
          M_state_d = ADD4_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000 || M_alu_z != 1'h1) begin
            M_state_d = WRONG_state;
          end
        end
      end
      ADD4_state: begin
        M_alu_a = 16'h7fff + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h00;
        sevensegdisp = 28'h8393204;
        sum = M_alu_aluOut;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h8000 && M_alu_v == 1'h1) begin
          M_clock_d = 1'h0;
          M_state_d = AND1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h8000 || M_alu_v != 1'h1) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SUB1_state: begin
        M_alu_a = 16'h0002 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h01;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0b57101;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = SUB2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SUB2_state: begin
        M_alu_a = 16'h0001 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h01;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0b57102;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000 && M_alu_z == 1'h1) begin
          M_clock_d = 1'h0;
          M_state_d = SUB3_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000 || M_alu_z != 1'h1) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SUB3_state: begin
        M_alu_a = 16'h8000 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h01;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h1357103;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h7fff && M_alu_v == 1'h1) begin
          M_clock_d = 1'h0;
          M_state_d = SUB4_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h7fff || M_alu_v != 1'h1) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SUB4_state: begin
        M_alu_a = 16'h8001 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h01;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h1357104;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h8000 && M_alu_n == 1'h1) begin
          M_clock_d = 1'h0;
          M_state_d = AND1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h8000 || M_alu_n != 1'h1) begin
            M_state_d = WRONG_state;
          end
        end
      end
      AND1_state: begin
        M_alu_a = 16'h0001 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h18;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h83bb201;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = AND2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      AND2_state: begin
        M_alu_a = 16'h0000 + wrong;
        M_alu_b = 16'h0000;
        M_alu_alufn = 6'h18;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h83bb202;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000) begin
          M_clock_d = 1'h0;
          M_state_d = AND3_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      AND3_state: begin
        M_alu_a = 16'h0000 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h18;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h83bb203;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000) begin
          M_clock_d = 1'h0;
          M_state_d = OR1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      OR1_state: begin
        M_alu_a = 16'h0001 + wrong;
        M_alu_b = 16'h0000;
        M_alu_alufn = 6'h1e;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h01c80f6;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = OR2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      OR2_state: begin
        M_alu_a = 16'h0000 + wrong;
        M_alu_b = 16'h0000;
        M_alu_alufn = 6'h1e;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h01c8176;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000) begin
          M_clock_d = 1'h0;
          M_state_d = XOR1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      XOR1_state: begin
        M_alu_a = 16'h0000 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h16;
        sum = M_alu_aluOut;
        sevensegdisp = 28'hf003901;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = XOR2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      XOR2_state: begin
        M_alu_a = 16'h0001 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h16;
        sum = M_alu_aluOut;
        sevensegdisp = 28'hf003902;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000) begin
          M_clock_d = 1'h0;
          M_state_d = LDR_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      LDR_state: begin
        M_alu_a = 16'h0006 + wrong;
        M_alu_alufn = 6'h1a;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h9993976;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0006) begin
          M_clock_d = 1'h0;
          M_state_d = SHL1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0006) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SHL1_state: begin
        M_alu_a = 16'hffff + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h20;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0ba2601;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'hfffe) begin
          M_clock_d = 1'h0;
          M_state_d = SHL2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'hfffe) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SHL2_state: begin
        M_alu_a = 16'h000f + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h20;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0ba2602;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h001e) begin
          M_clock_d = 1'h0;
          M_state_d = SHR1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h001e) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SHR1_state: begin
        M_alu_a = 16'h0007 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h21;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0ba3901;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0003) begin
          M_clock_d = 1'h0;
          M_state_d = SHR2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0003) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SHR2_state: begin
        M_alu_a = 16'hc000 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h21;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0ba3902;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h6000) begin
          M_clock_d = 1'h0;
          M_state_d = SRA1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h6000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SRA1_state: begin
        M_alu_a = 16'h0007 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h23;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0bca081;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0003) begin
          M_clock_d = 1'h0;
          M_state_d = SRA2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0003) begin
            M_state_d = WRONG_state;
          end
        end
      end
      SRA2_state: begin
        M_alu_a = 16'he000 + wrong;
        M_alu_b = 16'h0001;
        M_alu_alufn = 6'h23;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h0bca082;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'hf000) begin
          M_clock_d = 1'h0;
          M_state_d = CMPEQ_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'hf000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      CMPEQ_state: begin
        M_alu_setz = 16'h0000 + wrong;
        M_alu_alufn = 6'h33;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h87944f6;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000) begin
          M_clock_d = 1'h0;
          M_state_d = CMPLT_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      CMPLT_state: begin
        M_alu_setv = 16'h0001 + wrong;
        M_alu_setn = 16'h0000;
        M_alu_alufn = 6'h35;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h87303f6;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = CMPLE_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      CMPLE_state: begin
        M_alu_setz = 16'h0000 + wrong;
        M_alu_setv = 16'h0001;
        M_alu_setn = 16'h0000;
        M_alu_alufn = 6'h37;
        sum = M_alu_aluOut;
        sevensegdisp = 28'h87322f6;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = MULT1_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      MULT1_state: begin
        M_alu_a = 16'h0008 + wrong;
        M_alu_b = 16'h0008;
        M_alu_alufn = 6'h02;
        sum = M_alu_aluOut;
        sevensegdisp = 28'hdbd7601;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0040) begin
          M_clock_d = 1'h0;
          M_state_d = MULT2_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0004) begin
            M_state_d = WRONG_state;
          end
        end
      end
      MULT2_state: begin
        M_alu_a = 16'h0000 + wrong;
        M_alu_b = 16'h0008;
        M_alu_alufn = 6'h02;
        sum = M_alu_aluOut;
        sevensegdisp = 28'hdbd7602;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0000) begin
          M_clock_d = 1'h0;
          M_state_d = MULT3_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0000) begin
            M_state_d = WRONG_state;
          end
        end
      end
      MULT3_state: begin
        M_alu_a = 16'hffff + wrong;
        M_alu_b = 16'hffff;
        M_alu_alufn = 6'h02;
        sum = M_alu_aluOut;
        sevensegdisp = 28'hdbd7603;
        M_clock_d = M_clock_q + 1'h1;
        if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut == 16'h0001) begin
          M_clock_d = 1'h0;
          M_state_d = FINISH_state;
        end else begin
          if (M_clock_q[25+0-:1] == 1'h1 && M_alu_aluOut != 16'h0001) begin
            M_state_d = WRONG_state;
          end
        end
      end
      FINISH_state: begin
        sevensegdisp = 28'hcbbb200;
        M_clock_d = M_clock_q + 1'h1;
      end
      WRONG_state: begin
        sevensegdisp = 28'hcbcb900;
        M_clock_d = M_clock_q + 1'h1;
        sum = {5'h10{M_clock_q[23+0-:1]}};
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_clock_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_clock_q <= M_clock_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
