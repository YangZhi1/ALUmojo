module alu (
    input clk,  // clock
    input rst,  // reset
    input a[16],
    input b[16],
    input alufn[6],
    output aluOut[16],
    output z,
    output v,
    output n,
    input setz,
    input setv,
    input setn
    
    
  ) {
  .rst(rst){
    .clk(clk){
      // modules in the same file that will make up the ALU
      adder adder;
      shifter shifter;
      
      // TO DO: complete compare and shifter files
    }
  }
  boolean boolean;
  compare compare;
  always {
    z = 0;
    v = 0;
    n = 0;
    
    // passing the values of a, b and alufn into these modules
    adder.a = a;
    adder.b = b;
    adder.alufn = alufn;
    
    
    boolean.a = a;
    boolean.b = b;
    boolean.alufn = alufn;
    
    shifter.a = a;
    shifter.b = b;
    shifter.alufn = alufn;
    
    compare.alufn = alufn;
    compare.z = setz;
    compare.n = setn;
    compare.v = setv;
   
    aluOut = 16x{0};
    
    // use 2 MSBs to select which module we will enter to do ALU logic stuff
    case(alufn[5:4]){
      // given it starts with 00, we know its either add/sub/mult so we go to module adder
      b00:
        aluOut = adder.aluOut;
        z = adder.z;
        v = adder.v;
        n = adder.n;
      
      // 01 is AND/OR/XOR/"A"(LDR)
      b01:
        aluOut = boolean.aluOut;
        
      // 10 is all three shift functions
      b10:
        aluOut = shifter.aluOut;
        
      // 11 is all the compare functions
      b11:
        aluOut = compare.aluOut;   
    }
  }
}
