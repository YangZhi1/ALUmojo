module testALU (
    input clk,  // clock
    input rst,  // reset
    // take all these stuff from mojo_top.luc
    input io_button[5],      // use the 5 buttons to change states
    output io_led [3][8],    // light up io_leds to show output of ALU (sum0-sum15)
    input io_dip [3][8],
    output sevensegdisp [4][7]
  ) {

  
  .clk(clk){
    .rst(rst){
      fsm state = {ADD1, ADD2, ADD3, ADD4, SUB1, SUB2, SUB3, SUB4, AND1, AND2, AND3, OR1, OR2, XOR1, XOR2, LDR, SHL1, SHL2, SHR1, SHR2, SRA1, SRA2, CMPEQ, CMPLT, CMPLE, MULT1, MULT2, MULT3, FINISH, WRONG};
      alu alu;  // send values of a, b and alufn to alu to get the values
      
      
      dff clock[28]; // Clock freq is 100 MHz, So using 28 will take 2^28/100,000,000 or about 2.68seconds (1.34 seconds on mojo)
      // We can choose to use smaller numbers. Note that each smaller number means a faster "tick" (1/2 the time required to be precise)
    }
  }
  
  const SPEED = 27; // how fast clock ticks, we will use clock[SPEED] to determine how fast, smaller SPEED is the faster the state changes

  always {
    alu.a = 16x{0};
    alu.b = 16x{0};
    alu.alufn = 6x{0};

    io_led = 3x{{8h00}};    // turn LEDs off
    sevensegdisp = {"h","i",7h0, 7h0};
    
    
    
    case (state.q){
    
      state.ADD1:     // Normal case, just A + B
        alu.a = 16b1; // set A to 0000000000000001
        alu.b = 16b1; // set B to 0000000000000001
        alu.alufn = 6b000000;
        sevensegdisp = {"A","D","D", 7h0};
        
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        // 1+1 = 10 (lol mAtHs) 
        // So if SPEED is 27 this is checking 27th bit of clock to see if it has "flipped" to 1
        // If it has flipped to 1 means some seconds has passed and we can move on to next state

        if(clock.q[SPEED] == 1 && alu.aluOut == 16b10){
          clock.d = 0;                     // reset clock, so we need to wait some more seconds
          state.d = state.ADD2;             // since its correct, we move to next state
        }
        
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b10){ // anything that is not 10 is a wrong "sum", so its an error
          state.d = state.WRONG; // using the name wrong because I used it in mini-hardware project
        }
        
      
      state.ADD2:                     // Negative case, n is 1 (check n)
        alu.a = 16b1000000000000000; 
        alu.b = 16b1; 
        alu.alufn = 6b000000;
        sevensegdisp = {"A","D","D", 7h0};
        
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1000000000000001 && alu.n == 1){
          clock.d = 0;
          state.d = state.ADD3;
        }
        
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1000000000000001 || alu.n != 1){ // anything that is not 10 is a wrong "sum", so its an error
          state.d = state.WRONG; // using the name wrong because I used it in mini-hardware project
        }
        
        
      state.ADD3:                    // check z
        alu.a = 16b1111111111111111; // A + B will cause an overflow and aluOut will be 000000000...00
        alu.b = 16b1; 
        alu.alufn = 6b000000;
        sevensegdisp = {"A","D","D", 7h0};
        
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0 && alu.z == 1){
          clock.d = 0;
          state.d = state.ADD4;
        }
        
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0 || alu.z != 1){ // anything that is not 10 is a wrong "sum", so its an error
          state.d = state.WRONG; // using the name wrong because I used it in mini-hardware project
        }
        
      
      state.ADD4:                    // check v
        alu.a = 16b111111111111111; // <- 15 bits of 1, A+B = 16x{1};
        alu.b = 16b1; 
        alu.alufn = 6b000000;
        sevensegdisp = {"A","D","D", 7h0};

Dev Bahl, [04.11.19 16:28]

        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1000000000000000 && alu.v == 1){
          clock.d = 0;
          state.d = state.SUB1;
        }
        
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1000000000000000 || alu.v != 1){ // anything that is not 10 is a wrong "sum", so its an error
          state.d = state.WRONG; // using the name wrong because I used it in mini-hardware project
        }

      
      state.SUB1:
        alu.a = 16b1000000000000000
        alu.b = 16b1
        alu.alufn = 6b000001;
        
        sevensegdisp = {"S","U","B", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.SUB2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }
      
      state.SUB2:
        alu.a = 16b1000000000000001
        alu.b = 16b1
        alu.alufn = 6b000001;
        
        sevensegdisp = {"S","U","B", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1000000000000000 && alu.n == 1){
          clock.d = 0;
          state.d = state.SUB3;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1000000000000000 || alu.n != 1){ 
          state.d = state.WRONG;
        }

      state.SUB3:
        alu.a = 16b1
        alu.b = 16b1
        alu.alufn = 6b000001;
        
        sevensegdisp = {"S","U","B", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0 && alu.z == 1){
          clock.d = 0;
          state.d = state.SUB4;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0 || alu.z != 1){ 
          state.d = state.WRONG;
        }

      state.SUB4:
        alu.a = 16b1000000000000000
        alu.b = 16b1
        alu.alufn = 6b000001;
        
        sevensegdisp = {"S","U","B", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b111111111111111 && alu.v == 1){
          clock.d = 0;
          state.d = state.AND1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b111111111111111 || alu.v != 1){ 
          state.d = state.WRONG;
        }

      state.AND1:
        alu.a = 16b1
        alu.b = 16b1
        alu.alufn = 6b011000;
        
        sevensegdisp = {"A","N","D", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.AND2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }

      state.AND2:
        alu.a = 16b0
        alu.b = 16b0
        alu.alufn = 6b011000;
        
        sevensegdisp = {"A","N","D", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0){
          clock.d = 0;
          state.d = state.AND3;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0){ 
          state.d = state.WRONG;
        }

Dev Bahl, [04.11.19 16:28]


      state.AND3:
        alu.a = 16b1
        alu.b = 16b0
        alu.alufn = 6b011000;
        
        sevensegdisp = {"A","N","D", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0){
          clock.d = 0;
          state.d = state.OR1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0){ 
          state.d = state.WRONG;
        }

      state.OR1:
        alu.a = 16b0
        alu.b = 16b1
        alu.alufn = 6b011110;
        
        sevensegdisp = {"O","R",7h0, 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.OR2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }

      state.OR2:
        alu.a = 16b0
        alu.b = 16b0
        alu.alufn = 6b011110;
        
        sevensegdisp = {"O","R",7h0, 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0){
          clock.d = 0;
          state.d = state.XOR1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0){ 
          state.d = state.WRONG;
        }

      state.XOR1:
        alu.a = 16b0
        alu.b = 16b1
        alu.alufn = 6b010110;
        
        sevensegdisp = {"X","O","R", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.XOR2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }

      state.XOR2:
        alu.a = 16b1
        alu.b = 16b1
        alu.alufn = 6b010110;
        
        sevensegdisp = {"X","O","R", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0){
          clock.d = 0;
          state.d = state.LDR;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0){ 
          state.d = state.WRONG;
        }

      state.LDR:
        alu.a = 16b10
        alu.alufn = 6b011010;
        
        sevensegdisp = {"L","D","R", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b10){
          clock.d = 0;
          state.d = state.SHL1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b10){ 
          state.d = state.WRONG;
        }

      state.SHL1:
        alu.a = 16b11
        alu.b = 16b1
        alu.alufn = 6b100000;
        
        sevensegdisp = {"S","H","L", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b110){
          clock.d = 0;
          state.d = state.SHL2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b110){ 
          state.d = state.WRONG;
        }

      state.SHL2:
        alu.a = 16b1111111111111111
        alu.b = 16b1
        alu.alufn = 6b100000;
        
        sevensegdisp = {"S","H","L", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1111111111111110){
          clock.d = 0;
          state.d = state.SHR1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1111111111111110){ 
          state.d = state.WRONG;
        }

Dev Bahl, [04.11.19 16:28]


      state.SHR1:
        alu.a = 16b11
        alu.b = 16b1
        alu.alufn = 6b100001;
        
        sevensegdisp = {"S","H","R", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.SHR2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }
      
      state.SHR2:
        alu.a = 16b1100000000000000
        alu.b = 16b1
        alu.alufn = 6b100001;
        
        sevensegdisp = {"S","H","R", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1100000000000000){
          clock.d = 0;
          state.d = state.SRA1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1100000000000000){ 
          state.d = state.WRONG;
        }

      state.SRA1:
        alu.a = 16b101
        alu.b = 16b1
        alu.alufn = 6b100011;
        
        sevensegdisp = {"S","R","A", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b10){
          clock.d = 0;
          state.d = state.SRA2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b10){ 
          state.d = state.WRONG;
        }

      state.SRA2:
        alu.a = 16b1010000000000000
        alu.b = 16b1
        alu.alufn = 6b100011;
        
        sevensegdisp = {"S","R","A", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1101000000000000){
          clock.d = 0;
          state.d = state.CMPEQ;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1101000000000000){ 
          state.d = state.WRONG;
        }

      state.CMPEQ:
        alu.z = 16b0
        alu.v = 16b0
        alu.n = 16b0
        alu.alufn = 6b110011;
        
        sevensegdisp = {"C","E","Q", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0){
          clock.d = 0;
          state.d = state.CMPLT;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0){ 
          state.d = state.WRONG;
        }

      state.CMPLT:
        alu.v = 16b1
        alu.n = 16b0
        alu.alufn = 6b110101;
        
        sevensegdisp = {"C","L","T", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.CMPLE;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }

      state.CMPLE:
        alu.setz = 16b0;
        alu.setv = 16b1;
        alu.setn = 16b0;
        alu.alufn = 6b110111;
        
        sevensegdisp = {"C","L","E", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.MULT1;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }

      state.MULT1:
        alu.a = 16b10;
        alu.b = 16b10;
        alu.alufn = 6b000010;
        
        sevensegdisp = {"M","U","L", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b100){
          clock.d = 0;
          state.d = state.MULT2;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b100){ 
          state.d = state.WRONG;
        }

        
      state.MULT2:
        alu.a = 16b0;
        alu.b = 16b10;
        alu.alufn = 6b000010;
        
        sevensegdisp = {"M","U","L", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b0){
          clock.d = 0;
          state.d = state.MULT3;
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b0){ 
          state.d = state.WRONG;
        }

      state.MULT3:
        alu.a = 16b1111111111111111;
        alu.b = 16b1111111111111111;
        alu.alufn = 6b000010;
        
        sevensegdisp = {"M","U","L", 7h0};
        clock.d = clock.q + 1; // +1 to clock, so we can keep track of clock cycle to keep track of time
        
        if(clock.q[SPEED] == 1 && alu.aluOut == 16b1){
          clock.d = 0;
          state.d = state.FINISH;  // INSERT LAST STATE HERE
        }
        else if(clock.q[SPEED] == 1 && alu.aluOut != 16b1){ 
          state.d = state.WRONG;
        }
        
      state.FINISH:
        sevensegdisp = {"E", "N", "D", 7h0};
        clock.d = clock.q + 1;
    }
    
  }

}